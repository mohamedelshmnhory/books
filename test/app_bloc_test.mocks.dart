// Mocks generated by Mockito 5.2.0 from annotations
// in books/test/app_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:io' as _i7;

import 'package:books/local_storage.dart' as _i2;
import 'package:books/models/book_model.dart' as _i5;
import 'package:books/utils/backup/storage.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [DBHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDBHelper extends _i1.Mock implements _i2.DBHelper {
  MockDBHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set db(_i3.Database? _db) => super.noSuchMethod(Invocation.setter(#db, _db),
      returnValueForMissingStub: null);
  @override
  _i4.Future<void> call(String? tName) =>
      (super.noSuchMethod(Invocation.method(#call, [tName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<int> insert(String? table, _i5.Book? book) =>
      (super.noSuchMethod(Invocation.method(#insert, [table, book]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<dynamic> deleteDatabase() =>
      (super.noSuchMethod(Invocation.method(#deleteDatabase, []),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<List<Map<String, dynamic>>> getData(String? table) =>
      (super.noSuchMethod(Invocation.method(#getData, [table]),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i4.Future<List<Map<String, dynamic>>>);
  @override
  _i4.Future<int> update(String? table, _i5.Book? book) =>
      (super.noSuchMethod(Invocation.method(#update, [table, book]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> delete(String? table, int? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [table, id]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
}

/// A class which mocks [Storage].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorage extends _i1.Mock implements _i6.Storage {
  MockStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i7.File?> writeBooks(List<_i5.Book>? books) =>
      (super.noSuchMethod(Invocation.method(#writeBooks, [books]),
          returnValue: Future<_i7.File?>.value()) as _i4.Future<_i7.File?>);
  @override
  _i4.Future<_i7.File?> writeToCSV(String? text) =>
      (super.noSuchMethod(Invocation.method(#writeToCSV, [text]),
          returnValue: Future<_i7.File?>.value()) as _i4.Future<_i7.File?>);
  @override
  _i4.Future<List<_i5.Book>> readBooks(
          [bool? local = true, _i7.File? selectedFile]) =>
      (super.noSuchMethod(Invocation.method(#readBooks, [local, selectedFile]),
              returnValue: Future<List<_i5.Book>>.value(<_i5.Book>[]))
          as _i4.Future<List<_i5.Book>>);
  @override
  void share(List<_i5.Book>? books) =>
      super.noSuchMethod(Invocation.method(#share, [books]),
          returnValueForMissingStub: null);
  @override
  void shareCSV() => super.noSuchMethod(Invocation.method(#shareCSV, []),
      returnValueForMissingStub: null);
  @override
  _i4.Future<List<_i5.Book>> readFromFilePicker() =>
      (super.noSuchMethod(Invocation.method(#readFromFilePicker, []),
              returnValue: Future<List<_i5.Book>>.value(<_i5.Book>[]))
          as _i4.Future<List<_i5.Book>>);
}
